{
  "hash": "e44e746e89ba15da4580a86d5af9a25e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Cálculo da constante de eqilibrio e as concentracións mediante a minimizaci´lln da enerxía libre de Gibbs\"\nformat: html\nautor: \"Anxo Sánchez\"\nlang: es\n---\n\n\n\n\nCalcular as composicións no equilibrio a 1000 K e 1 bar para a reacción de intercambio gas auga (WGS) para unha limentación equimolar de CO e H<sub>2</sub>O usando:\n- a minimización da enexía libre de Gibbs\n- o grao de avance da reacción.\n\nPara o cálculo das funcióons termodimmámicas usa os **polinomios de Shomate**.\n\nConsultado a base de datos do Nist temos os valores eequiridos para resolver o problema. \n\nCO  \n$\\DeltaH_{f,gas}^o$\t= -110.53 kJ·mol<sup>-1</sup>\n$S^o$_{gas}$ = 197.66 J·mol<sup>-1</sup>·K<sup>-1</sup>\nCO<sub>2</sub>    \n$\\DeltaH_{f,gas}^o$\t= -393.51 kJ·mol<sup>-1</sup>  \n$S^o$_{gas}$ = 213.79 J·mol<sup>-1</sup>·K<sup>-1</sup>  \t\nH<sub>2</sub>  \n$S^o$_{gas}$ = 130.68 J·mol<sup>-1</sup>·K<sup>-1</sup>\t\nH<sub>2</sub>O  \n$\\DeltaH_{f,gas}^o$ = -241.83k J·mol<sup>-1</sup>  \n$S^o$_{gas}$ = 188.84 J·mol<sup>-1</sup>·K<sup>-1</sup>\n  \nRecordamos as as ecuación de Shomate baseadas en 8 termos A, B, C, D, E, F, G, H, que permiten calcular varios parámetros termodinámicos:\n  \n$$\n\\beg]in{align*}\nC^o_p & = & A + B t + C t^2 + D t^3 + \\frac{E}{t^2} \\\\\nH^o − H°_{298.15} & = & At + B \\frac{B}{\\frac {t^2} {2}} + C \\frac{C}{\\frac {t^3} {3}} + D \\frac{D}{\\frac {t^4} {4}} − \\frac{E}{t^2} + F − H\nS^o = A \\ln(t) + B t + C \\frac{t^2}{2} + D \\frac{t^3}{3} − \\frac{E}{2t^2} + G\n\\end{align*}\n$$\n  \nonde:  \n- Cp = heat capacity (J/mol*K).  \n- H° = standard enthalpy (kJ/mol).  \n- S° = standard entropy (J/mol*K).  \n- t = temperature (K) / 1000.\n\nComo a temperatura do problema é de 1000 K, tomaremos o primeiro conxunto de datos (298-1300 K).\n\n\n| CO | CO2 | H2 | H2O |\n| ---------: | ---------: | ---------: | ---------: | \n| A\t| 25.56759 | 24.99735 | 33.066178 |  30.09200 |  \n| B\t| 6.096130 | 55.18696 | -11.363417 | 6.832514 |  \n| C\t| 4.054656 | -33.69137 | 11.432816 | 6.793435 |    \n| D\t| -2.671301 | 7.948387 | -2.772874 | -2.534480 |   \n| E\t| 0.131021 | -0.136638 | -0.158558 | 0.082139 |   \n| F\t| -118.0089 | -403.6075 | -9.980797 | -250.8810 |  \n| G\t| 227.3665 | 228.2431 | 172.707974 | 223.3967 |  \n| H\t| -110.5271 | -393.5224 | 0.0 | -241.8264 |   \n\n::: {#c79a4696 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nT = 1000  # K\nR = 8.314e-3 # kJ/mol/K\n\nP = 1.0 # atm, this is the total pressure in the reactor\nP0 = 1.0 # atm, this is the standard state pressure\n\nespecies = ['CO', 'CO2', 'H2', 'H2O']\n\n# Entalpías de formación at 298.15 K sacadas do NIST Webbook\n\nHf298 = [\n    -110.53,  # CO\n    -241.826, # H2O\n    -393.51,  # CO2\n       0.0]   # H2\n\n# Parámetros das ecuacións de Shomate para cada especie\n#           A          B           C          D          E            F          G       H\nWB = [[25.56759,  6.096130,     4.054656,  -2.671301,  0.131021, -118.0089, 227.3665,   -110.5271],  # CO\n      [30.09200,  6.832514,     6.793435,  -2.534480,  0.082139, -250.8810, 223.3967,   -241.8264],  # H2O\n      [24.99735,  55.18696,   -33.69137,    7.948387, -0.136638, -403.6075, 228.2431,   -393.5224],  # CO2\n      [33.066178, -11.363417,  11.432816,  -2.772874, -0.158558, -9.980797, 172.707974,    0.0]]     # H2\n\nWB = np.array(WB)\n\n# Ecuacións de Shomate\n\nt = T/1000\nT_H = np.array([t,  t**2 / 2.0, t**3 / 3.0, t**4 / 4.0, -1.0 / t, 1.0, 0.0, -1.0])\nT_S = np.array([np.log(t), t,  t**2 / 2.0,  t**3 / 3.0, -1.0 / (2.0 * t**2), 0.0, 1.0, 0.0])\n\nH = np.dot(WB, T_H)        # (H - H_298.15) kJ/mol\nS = np.dot(WB, T_S/1000.0) # entropía absoluta kJ/mol/K\n\nGio = Hf298 + H - T * S      # Gibbs energy of each component at 1000 K\n```\n:::\n\n\nAgora, construimos a función da enerxía libre de Gibbs, contabilizando o cambio na actividade debido aos cambios de concentración (mestura ideal).\n\n::: {#34d77369 .cell execution_count=2}\n``` {.python .cell-code}\ndef func(ni):\n    ni = np.array(ni)\n    sumni = np.sum(ni)\n    Gi =  Gio / ( R * T ) + np.log( ni / sumni * P / P0 )\n    return np.dot(ni, Gi)\n```\n:::\n\n\nImpoñemos a restrición da conservación dos átomos desde as condicións iniciais ata a distribución no equilibrio das especies. Estas restricións teñen a forma de un sistema de ecuacións:\n  \n$$\nA_{equil} = b_{equil}\n$$\n  \nonde $n$ é o vector que contén o número de moles de cada especie.\n\n::: {#ba5d68f3 .cell execution_count=3}\n``` {.python .cell-code}\nAeq = np.array([[ 1,    0,    1,    0],  # balance C \n                [ 1,    1,    2,    0],  # balance O \n                [ 0,    2,    0,    2]]) # balance H \n\n# alimentación equimolar de 1 mol de H2O e 1 mol de CO\nbeq = np.array([1,  # moles de C na alimentación\n                2,  # moles de O na alimentación\n                2]) # moles de H na alimentación\n```\n:::\n\n\nDefinimos a funxión de conservación de átomos:\n\n::: {#40831a2e .cell execution_count=4}\n``` {.python .cell-code}\ndef ec1(ni):\n    'condición da lei de conservación dos átoms'\n    return np.dot(Aeq, ni) - beq\n```\n:::\n\n\nAgora xa podemos resolver. O podemos facer con 'fmin_slsqp' \n\n::: {#6f8b707c .cell execution_count=5}\n``` {.python .cell-code}\nfrom scipy.optimize import fmin_slsqp \n\nn0 = [0.5, 0.5, 0.5, 0.5]  # supoñemos valores iniciais\nN = fmin_slsqp(func, n0, f_eqcons=ec1)\nprint(N)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nOptimization terminated successfully    (Exit mode 0)\n            Current function value: -95.81000249396038\n            Iterations: 2\n            Function evaluations: 11\n            Gradient evaluations: 2\n[0.45502309 0.45502309 0.54497691 0.54497691]\n```\n:::\n:::\n\n\n# Cálculo das fraccións molares e presións parciais\n\nAs presións aquí están de bo acordo coas presións atopadas por outros métodos. O desacordo menor (no terceiro ou cuarto lugar decimal) é probable debido ás tolerancias de converxencia nos distintos algoritmos empregados.\n\n::: {#4c577bd2 .cell execution_count=6}\n``` {.python .cell-code}\nyi = N / np.sum(N)\nPi = yi * P\n\nfor s, y, p in zip(especies, yi, Pi):\n    print('{0:10s}: {1:1.4f} {2:1.4f}'.format(s, y, p))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCO        : 0.2275 0.2275\nCO2       : 0.2275 0.2275\nH2        : 0.2725 0.2725\nH2O       : 0.2725 0.2725\n```\n:::\n:::\n\n\n# Constantes de equilibrio informático\n\nPodemos calcular a constante de equilibrio para a reacción:\n\nCO + H<sub>2</sub>O ⇌ CO<sub>2</sub> + H<sub>2</sub>\n\n::: {#01771f5c .cell execution_count=7}\n``` {.python .cell-code}\nnui = np.array([-1, -1, 1, 1])  # coeficientes estequiométricos da reacción\nK = np.prod(yi**nui)\nprint(K)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.4344629828663398\n```\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}